// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bluzelle/curium/x/crud/internal/keeper (interfaces: IKeeper)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "github.com/bluzelle/curium/x/crud/internal/types"
	types0 "github.com/cosmos/cosmos-sdk/store/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	amino "github.com/tendermint/go-amino"
	db "github.com/tendermint/tm-db"
	reflect "reflect"
)

// MockIKeeper is a mock of IKeeper interface
type MockIKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockIKeeperMockRecorder
}

// MockIKeeperMockRecorder is the mock recorder for MockIKeeper
type MockIKeeperMockRecorder struct {
	mock *MockIKeeper
}

// NewMockIKeeper creates a new mock instance
func NewMockIKeeper(ctrl *gomock.Controller) *MockIKeeper {
	mock := &MockIKeeper{ctrl: ctrl}
	mock.recorder = &MockIKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIKeeper) EXPECT() *MockIKeeperMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method
func (m *MockIKeeper) DeleteAll(arg0 types1.Context, arg1 types0.KVStore, arg2 string, arg3 types1.AccAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll", arg0, arg1, arg2, arg3)
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockIKeeperMockRecorder) DeleteAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockIKeeper)(nil).DeleteAll), arg0, arg1, arg2, arg3)
}

// DeleteValue mocks base method
func (m *MockIKeeper) DeleteValue(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteValue", arg0, arg1, arg2, arg3)
}

// DeleteValue indicates an expected call of DeleteValue
func (mr *MockIKeeperMockRecorder) DeleteBLZValue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockIKeeper)(nil).DeleteValue), arg0, arg1, arg2, arg3)
}

// GetValue mocks base method
func (m *MockIKeeper) GetValue(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3 string) types.BLZValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.BLZValue)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockIKeeperMockRecorder) GetBLZValue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockIKeeper)(nil).GetValue), arg0, arg1, arg2, arg3)
}

// GetCdc mocks base method
func (m *MockIKeeper) GetCdc() *amino.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdc")
	ret0, _ := ret[0].(*amino.Codec)
	return ret0
}

// GetCdc indicates an expected call of GetCdc
func (mr *MockIKeeperMockRecorder) GetCdc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdc", reflect.TypeOf((*MockIKeeper)(nil).GetCdc))
}

// GetCount mocks base method
func (m *MockIKeeper) GetCount(arg0 types1.Context, arg1 types0.KVStore, arg2 string, arg3 types1.AccAddress) types.QueryResultCount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.QueryResultCount)
	return ret0
}

// GetCount indicates an expected call of GetCount
func (mr *MockIKeeperMockRecorder) GetCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIKeeper)(nil).GetCount), arg0, arg1, arg2, arg3)
}

// GetKVStore mocks base method
func (m *MockIKeeper) GetKVStore(arg0 types1.Context) types0.KVStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKVStore", arg0)
	ret0, _ := ret[0].(types0.KVStore)
	return ret0
}

// GetKVStore indicates an expected call of GetKVStore
func (mr *MockIKeeperMockRecorder) GetKVStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKVStore", reflect.TypeOf((*MockIKeeper)(nil).GetKVStore), arg0)
}

// GetKeyValues mocks base method
func (m *MockIKeeper) GetKeyValues(arg0 types1.Context, arg1 types0.KVStore, arg2 string, arg3 types1.AccAddress) types.QueryResultKeyValues {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyValues", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.QueryResultKeyValues)
	return ret0
}

// GetKeyValues indicates an expected call of GetKeyValues
func (mr *MockIKeeperMockRecorder) GetKeyValues(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyValues", reflect.TypeOf((*MockIKeeper)(nil).GetKeyValues), arg0, arg1, arg2, arg3)
}

// GetKeys mocks base method
func (m *MockIKeeper) GetKeys(arg0 types1.Context, arg1 types0.KVStore, arg2 string, arg3 types1.AccAddress) types.QueryResultKeys {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.QueryResultKeys)
	return ret0
}

// GetKeys indicates an expected call of GetKeys
func (mr *MockIKeeperMockRecorder) GetKeys(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockIKeeper)(nil).GetKeys), arg0, arg1, arg2, arg3)
}

// GetOwner mocks base method
func (m *MockIKeeper) GetOwner(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3 string) types1.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types1.AccAddress)
	return ret0
}

// GetOwner indicates an expected call of GetOwner
func (mr *MockIKeeperMockRecorder) GetOwner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockIKeeper)(nil).GetOwner), arg0, arg1, arg2, arg3)
}

// GetValuesIterator mocks base method
func (m *MockIKeeper) GetValuesIterator(arg0 types1.Context, arg1 types0.KVStore) db.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesIterator", arg0, arg1)
	ret0, _ := ret[0].(db.Iterator)
	return ret0
}

// GetValuesIterator indicates an expected call of GetValuesIterator
func (mr *MockIKeeperMockRecorder) GetValuesIterator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesIterator", reflect.TypeOf((*MockIKeeper)(nil).GetValuesIterator), arg0, arg1)
}

// IsKeyPresent mocks base method
func (m *MockIKeeper) IsKeyPresent(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyPresent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeyPresent indicates an expected call of IsKeyPresent
func (mr *MockIKeeperMockRecorder) IsKeyPresent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyPresent", reflect.TypeOf((*MockIKeeper)(nil).IsKeyPresent), arg0, arg1, arg2, arg3)
}

// RenameKey mocks base method
func (m *MockIKeeper) RenameKey(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3, arg4 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RenameKey indicates an expected call of RenameKey
func (mr *MockIKeeperMockRecorder) RenameBLZKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameKey", reflect.TypeOf((*MockIKeeper)(nil).RenameKey), arg0, arg1, arg2, arg3, arg4)
}

// SetValue mocks base method
func (m *MockIKeeper) SetValue(arg0 types1.Context, arg1 types0.KVStore, arg2, arg3 string, arg4 types.BLZValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0, arg1, arg2, arg3, arg4)
}

// SetValue indicates an expected call of SetValue
func (mr *MockIKeeperMockRecorder) SetBLZValue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockIKeeper)(nil).SetValue), arg0, arg1, arg2, arg3, arg4)
}
